Loci Subsampling - Selecting Loci that support known clades
Analysis notes

GitHub Repo:
https://github.com/LMBiancani/FilterByKnownClades

Written Notes:
https://docs.google.com/document/d/1JuyuBTQ92Tx13pbG4MbDrLy_Qv37Juk4LdzJcGbz2Qw/edit?usp=sharing

Andromeda location:
cd /data/schwartzlab/Biancani/FilterByKnownClades/

Local location:
cd /Users/biancani/Documents/FilterByKnownClades

Alexandra Machine Learning Repo (for simulated loci):
https://github.com/alexandrawalling/PML/tree/main

Local (macbook) directory:
/Users/biancani/Documents/FilterByKnownClades
Andromeda directory:
/data/schwartzlab/Biancani/FilterByKnownClades

2024.05.29

Goal: convert a forked repo to a stand-alone repository without loosing any of the tracked history or contributions.
Create stand-alone repository from Zack's github.

- Fork Zack's Repository: https://github.com/LMBiancani/FilterByKnownClades

Locally:
- Pull all changes in Forked repo to local machine
git clone https://github.com/LMBiancani/FilterByKnownClades

On Github:
- Change the name of the Forked Repository (to anything else ex. "DeleteMe")
- Create a new, empty repo and give it the original name of the Forked Repository

Locally:
- Push all changes to Github (you should not have to do anything special because the new repo now has the same name as
the repo this was originally synced with).
On Github:
- Confirm the new repository contains everything it should
- Delete the forked repository

On Andromeda:
git clone https://github.com/LMBiancani/FilterByKnownClades

add gitignore and include Loci folder

Subset Zack's aligned loci to create test dataset:
/data/schwartzlab/zbergeron/SISRS_mammals/filteredMammalLoci
(101,405 alignments)
ls *11.fasta
(2,780 alignement)

cp /data/schwartzlab/zbergeron/SISRS_mammals/filteredMammalLoci/*11.fasta /data/schwartzlab/Biancani/FilterByKnownClades/Loci/

2024.06.27
Simulations from Alexandra
Simulated loci:
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/fong/1/alignments3/
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/liu/1/alignments3/
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/mcgowen/1/alignments3/
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/wickett/1/alignments3/

Use copy_data.sh to copy simulated loci to Loci folder (on andromeda only: Data folder listed in gitignore)
deistination folders:
/data/schwartzlab/Biancani/FilterByKnownClades/data/Fong/simulated_loci/
/data/schwartzlab/Biancani/FilterByKnownClades/data/Liu/simulated_loci/
/data/schwartzlab/Biancani/FilterByKnownClades/data/McGowen/simulated_loci/
/data/schwartzlab/Biancani/FilterByKnownClades/data/Wickett/simulated_loci/

tree used for simulations: inferenceEmpirical.iqtree
submission file that generated Empirical trees:
run_iqtree_Fong_empirical.sh
run_iqtree_..._empirical.sh
in...
/data/schwartzlab/awalling/Phylo_ML/datasets/Fong_alignments/
/data/schwartzlab/awalling/Phylo_ML/datasets/Liu_alignments/
/data/schwartzlab/awalling/Phylo_ML/datasets/McGowen_alignments/
/data/schwartzlab/awalling/Phylo_ML/datasets/Wickett_alignments/

Fong:
/data/schwartzlab/awalling/Phylo_ML/datasets/Fong_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/Fong_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/Fong/emperical_tree/

Liu
/data/schwartzlab/awalling/Phylo_ML/datasets/Liu_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/Liu_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/Liu/emperical_tree/

Wickett
/data/schwartzlab/awalling/Phylo_ML/datasets/Wickett_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/Wickett_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/Wickett/emperical_tree/

McGowen
/data/schwartzlab/awalling/Phylo_ML/datasets/McGowen_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/McGowen_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/McGowen/emperical_tree/

#####

Example submission file for generating emperical trees:
run_iqtree_Fong_empirical.sh
----------
#!/bin/bash
#SBATCH --job-name="IQFong"
#SBATCH --time=96:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=2   # number of nodes
#SBATCH --ntasks-per-node=24   # processor core(s) per node
#SBATCH --mem=250G
#SBATCH --exclusive


cd $SLURM_SUBMIT_DIR

date
#Path to IQTREE executable. Modify with path to your own executable.
iqtree_exe="/home/aknyshov/alex_data/andromeda_tools/iqtree-2.1.2-Linux/bin/iqtree2"


#Concatenate input fasta files and prepare partitions ahead of IQTree run
python3 /home/aknyshov/alex_data/andromeda_tools/AMAS/amas/AMAS.py concat -f fasta -d dna --out-format fasta --part-format raxml -i *fas -c 20 -t concatenatedTrain.fasta -p partitionsTrain.txt

#Run IQtree. Flags: -nt: use 20 CPU cores -spp: specifies partition file but allows partitions to have different evolutionary speeds -pre: specifies prefix for output files -m: determine best fit model immediately followed by tree reconstruction -bb: sets 1000 bootstrap replicates  -alrt: sets 1000 replicates to perform SH-like approximate likelihood test (SH-aLRT)
${iqtree_exe} -nt 20 -s concatenatedTrain.fasta -spp partitionsTrain.txt -pre inferenceEmpirical -m MFP -bb 1000 -alrt 1000


date
---------

2024.07.03

To Do:

- For each simulated locus:
  - infer an unconstrained gene tree, calculate maximum likelihood (completed?)
  - infer a constrained gene tree (constrain "known" clade), calculate maximum likelihood
  - compare likelihoods
    - if constrained is > or = unconstrained, keep LOCUS (else filter locsus)
- Build species tree from filtered simulated Loci
- Build species tree from unfiltered simulated LOCI
- Compare species tree to empirical tree (which is more similar)?

2024.07.10

nano /data/schwartzlab/Biancani/FilterByKnownClades/01_iqtree/00_iqtree_prep.sh
##########
#!/bin/bash
#SBATCH --job-name="IQprep"
#SBATCH --time=0:30:00  # walltime limit (HH:MM:SS)
#SBATCH --mail-user="biancani@uri.edu" #CHANGE THIS to your user email address
#SBATCH --mail-type=ALL
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH -c 1
#SBATCH --mem-per-cpu=6G

## UPDATE as needed...
# path to Project Directory:
PROJECT=/data/schwartzlab/Biancani/FilterByKnownClades
# path to data directory:
DATA=$PROJECT/data
# Dataset name:
DATASET="Fong"
# path to IQtree scripts:
scripts_dir=$PROJECT/01_iqtree
# path to aligned loci:
aligned_loci_path=$DATA/$DATASET/simulated_loci
# path to output folder (will be created if doesn't exist):
OUTPUT=$PROJECT/output/$DATASET
# name of iqtree array work folder (will be created if doesn't exist):
array_work_folder=iqtree_assessment
# number of loci per array task
LociPerTask=50

mkdir -p $OUTPUT
cd $OUTPUT
mkdir -p ${array_work_folder}
cd ${array_work_folder}
ls ${aligned_loci_path} | rev | cut -f1 -d/ | rev | split -l $LociPerTask - aligned_loci_list_
arrayN=$(ls aligned_loci_list_* | wc -l)
ls aligned_loci_list_* > array_list.txt
ARRAY="#SBATCH --array=[1-${arrayN}]%40"
echo $ARRAY
echo $ARRAY >> sbatch_array_directive.txt
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329346
Job ID: 329346
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:04 core-walltime
Job Wall-clock time: 00:00:04
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)

output: #SBATCH --array=[1-40]%40
(to be included in subsequent array jobs)

nano /data/schwartzlab/Biancani/FilterByKnownClades/01_iqtree/01_iqtree_array_gtree.sh
##########
#!/bin/bash
#SBATCH --job-name="IQarr_gtree"
#SBATCH --time=48:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH -c 1
#SBATCH --mem-per-cpu=6G
#SBATCH --mail-user="biancani@uri.edu" #CHANGE THIS to your user email address
#SBATCH --mail-type=ALL
#SBATCH --array=[1-40]%40

## UPDATE as needed...
# path to Project Directory:
PROJECT=/data/schwartzlab/Biancani/FilterByKnownClades
# path to data directory:
DATA=$PROJECT/data
# Dataset name:
DATASET="Fong"
# path to IQtree scripts:
scripts_dir=$PROJECT/01_iqtree
# path to aligned loci:
aligned_loci_path=$DATA/$DATASET/simulated_loci
# path to output folder (will be created if doesn't exist):
OUTPUT=$PROJECT/output/$DATASET
# name of iqtree array work folder (will be created if doesn't exist):
array_work_folder=$OUTPUT/iqtree_assessment
# path to iqtree executable:
iqtree_exe="/data/schwartzlab/alex/andromeda_tools/iqtree-2.1.2-Linux/bin/iqtree2"

date
cd $array_work_folder
mkdir -p GeneTreesUnconstrained
cd GeneTreesUnconstrained

fileline=$(sed -n ${SLURM_ARRAY_TASK_ID}p $array_work_folder/array_list.txt)
cat ${array_work_folder}/${fileline} | while read line
do
	echo $line
	${iqtree_exe} -nt 1 -s ${aligned_loci_path}/${line} -pre inference_${line} -alrt 1000 -m GTR+G
	rm -f inference_${line}.ckp.gz inference_${line}.iqtree inference_${line}.log inference_${line}.bionj inference_${line}.mldist inference_${line}.uniqueseq.phy
done
##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329481
Job ID: 329481
Array Job ID: 329481_40
Cluster: andromeda
User/Group: biancani/schwartzlab
State: FAILED (exit code 1)
Cores: 1
CPU Utilized: 01:22:53
CPU Efficiency: 98.75% of 01:23:56 core-walltime
Job Wall-clock time: 01:23:56
Memory Utilized: 35.70 MB
Memory Efficiency: 0.58% of 6.00 GB
**** fail due to an error removing output files that did not exist. you can use the -f (force) flag with the rm command to remove a file only if it exists, without throwing an error if it does not. The -f flag tells rm to ignore nonexistent files and arguments, and never prompt for confirmation..
Otherwise output looks fine.


For other loci groups, edit the .sh files and replace "Fong" with the name of one of the other datasets
########## Wickett ##########
for file in $(ls 0*)
do
    sed -i 's/\bFong\b/Wickett/g' "$file"
done
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329523
Job ID: 329523
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:08 core-walltime
Job Wall-clock time: 00:00:08
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)

##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329524
Job ID: 329524
Array Job ID: 329524_40
Cluster: andromeda
User/Group: biancani/schwartzlab
State: FAILED (exit code 1)
Cores: 1
CPU Utilized: 01:12:49
CPU Efficiency: 98.78% of 01:13:43 core-walltime
Job Wall-clock time: 01:13:43
Memory Utilized: 45.28 MB
Memory Efficiency: 0.74% of 6.00 GB
**** fail due to an error removing output files that did not exist. you can use the -f (force) flag with the rm command to remove a file only if it exists, without throwing an error if it does not. The -f flag tells rm to ignore nonexistent files and arguments, and never prompt for confirmation..
Otherwise output looks fine.

########## Liu ##########
for file in $(ls 0*)
do
    sed -i 's/\bWickett\b/Liu/g' "$file"
done
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329599
Job ID: 329599
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:09 core-walltime
Job Wall-clock time: 00:00:09
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)
##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329600
Job ID: 329600
Array Job ID: 329600_40
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:39:25
CPU Efficiency: 98.50% of 00:40:01 core-walltime
Job Wall-clock time: 00:40:01
Memory Utilized: 26.23 MB
Memory Efficiency: 0.43% of 6.00 GB


########## McGowen ##########
for file in $(ls 0*)
do
    sed -i 's/\bLiu\b/McGowen/g' "$file"
done
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329640
Job ID: 329640
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:07 core-walltime
Job Wall-clock time: 00:00:07
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)
##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329641
Job ID: 329641
Array Job ID: 329641_40
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:35:52
CPU Efficiency: 97.86% of 00:36:39 core-walltime
Job Wall-clock time: 00:36:39
Memory Utilized: 17.40 MB
Memory Efficiency: 0.28% of 6.00 GB

2024.07.11-12
Constrained gene trees:
# IQ-TREE: -g Specify a topological constraint tree file in NEWICK format. The constraint tree can be a multifurcating tree and need not to include all taxa.
#Generate collapsed trees for constrained gene trees
# ex. (A,B,C,D,(E,F,G,H));

Original R script (used to prep the emperical trees for simulations):
  https://github.com/alexandrawalling/PML/blob/main/1_empirical_tree_generation/empirical_tree_processor.R

What this script does:
  part 1 - for each dataset...
  - read emperical trees from Alexandra
  - export emperical trees (after re-rooting) as Author_emperical.tree
  part 2 - for each dataset...
  - read saved emperical tree
  - export CSV table of tip names & numbers as Author_tips.csv
  - export emperical tree with numeric tip labels as Author_num_tips_emperical.tree
  - export emperical tree with combined number & labels on tips as Author_combo_tips_emperical.tree
  - export emperical tree with numbered nodes as Author_num_nodes_emperical.tree
  - export collapsed constrained tree (for constrained gene trees) as Author_constraint.newick

########
module load R-bundle-Bioconductor/3.16-foss-2022b-R-4.2.2
R
#Load in libraries
library(ape)
library(ggplot2)
library(geiger)
library(ggtree)

datasets <- c("Fong","Liu","Wickett","McGowen")

# copy emperical trees from Alexandra:
for (dataset in datasets){
  setwd("/data/schwartzlab/awalling/Phylo_ML")
  tree_path <- paste("simulations/empirical", tolower(dataset), "1/inferenceEmpirical.treefile", sep="/")
  emperical_tree <- read.tree(tree_path)
  #re-root trees (as done by Alexandra before simulating loci):
  if (dataset == "Fong"){
    emperical_tree <- root(emperical_tree, outgroup = "Danio")
  } else if (dataset == "Liu"){
    emperical_tree <- root(emperical_tree, outgroup = "danio_rer")
  } else if (dataset == "Wickett"){
    emperical_tree <- root(emperical_tree, outgroup = "Pyramimonas_parkeae")
  } else if (dataset == "McGowen"){
    # McGowen tree was not re-rooted for simulations
  }
  #Save rerooted emperical tree
  out_path <- paste("/data/schwartzlab/Biancani/FilterByKnownClades/data", dataset, "emperical_tree", sep = "/")
  setwd(out_path)
  filename <- paste(dataset, "emperical.tree", sep = "_")
  #write.tree(emperical_tree, filename)
}

## Pre-processing of emperical trees
for (dataset in datasets){
  ## Read in previously saved emperical tree:
  directory_path <- paste("/data/schwartzlab/Biancani/FilterByKnownClades/data", dataset, "emperical_tree", sep = "/")
  setwd(directory_path)
  emperical_filename <- paste(dataset, "emperical.tree", sep = "_")
  emperical_tree <- read.tree(emperical_filename)
  ## Update tip labels:
  tips <- emperical_tree$tip.label #store original tip labels
  tip_names_tree <- emperical_tree #store tree with original tip labels
  emperical_tree$tip.label <- as.character(1:length(emperical_tree$tip.label)) #replace tip labels with numbers
  tip_nums <- emperical_tree$tip.label #store numbered tip labels
  tip_num_tree <- emperical_tree #store tree with numbered tip labels
  ## Export table of tip names & numbers:
  tips_df <- data.frame(tip_nums, tips)
  filename <- paste(dataset,"tips.csv",sep = "_")
  #write.table(tips_df, file = filename, sep = ",", row.names = FALSE, col.names = FALSE)
  ## Export tree with numbered tips:
  filename <- paste(dataset, "num_tips_emperical.tree", sep = "_")
  #write.tree(tip_num_tree, filename)
  ## Create combined (number & name) tip labels:
  combined_tips <- apply(tips_df, 1, function(row) paste(row, collapse = "_")) #use apply to concatenate strings across rows (margin=1 for rows)
  emperical_tree$tip.label <- combined_tips #Replace tip labels with numbers & names
  combo_tip_tree <- emperical_tree #store tree with combined tip labels
  ## Export tree with combined tip labels:
  filename <- paste(dataset, "combo_tips_emperical.tree", sep = "_")
  #write.tree(combo_tip_tree, filename)
  ## Label nodes with numbers (node numbers start with the number of tips +1):
  num_internal_nodes <- combo_tip_tree$Nnode #number of internal nodes
  num_tips <- Ntip(combo_tip_tree) #number of tips
  node_numbers <- seq((1+num_tips), (1+num_tips+num_internal_nodes)) #generate node numbers
  node_num_tree <- combo_tip_tree #store copy of tree for node numbering
  node_num_tree$node.label <- as.character(node_numbers) #assign sequential numbers to node labels
  ## Export node numbered tree:
  filename <- paste(dataset, "num_nodes_emperical.tree", sep = "_")
  #write.tree(node_num_tree, filename)
  ## Generate collapsed trees for constrained gene trees, ex. (A,B,C,D,(E,F,G,H));
  ## trees with numbered nodes were inspected to ID node corresponding to clade to be constrained.
  ## Fong 46 Turtles (node 140) ## Liu 16 Primates (node 135) ## Wickett 37 Angiosperms/FloweringPlants (node 116) ## McGowen 88 Cetaceans/Ingroup (node 177)
  if (dataset=="Fong"){
    node <- 140
  } else if (dataset=="Liu"){
    node <- 135
  } else if (dataset=="Wickett"){
    node <- 116
  } else if (dataset=="McGowen"){
    node <- 177
  }
  constrained_clade <- extract.clade(tip_num_tree, node) #extract constrained clade from tip numbered tree
  constrained_tip_nums <- constrained_clade$tip.label #store tip numbers for taxa in constrained clade
  unconstrained_tip_nums <- setdiff(tip_nums, constrained_tip_nums) #filter constrained tips from all tips to store unconstrained tips
  ## Generate newick format for constrained tree:
  constrained_newick <- paste("(", (paste(constrained_tip_nums, collapse = ", ")), ")", sep = "")
  unconstrained_newick <- paste(unconstrained_tip_nums, collapse = ", ")
  combined_newick <- paste("(", unconstrained_newick, ",", constrained_newick ,");",sep = "")
  ## Export constrained tree (in newick format)
  filename <- paste(dataset, "constraint.newick", sep = "_")
  #cat(combined_newick, file = filename)
  ## Generate pruned constraint trees for each simulated locus
  loci_path <- paste("/data/schwartzlab/Biancani/FilterByKnownClades/data", dataset, "simulated_loci", sep = "/")
  constraint_path <- paste("/data/schwartzlab/Biancani/FilterByKnownClades/data", dataset, "constraint_trees", sep = "/")
  loci <- list.files(path = loci_path, pattern = "loc*", full.names = FALSE) # list simulated loci filenames
  for (locus in loci) {
    setwd(loci_path)
    locus_lines <- readLines(locus) #read file lines into character vector
    headings <- locus_lines[grepl("^>", locus_lines)]
    taxa <- gsub(">", "", headings) #strip ">" from headings to produce list of taxa
    constrained_tips <- intersect(constrained_tip_nums, taxa) #filter constrained_tip_nums for only entries that also appear in taxa
    unconstrained_tips <- intersect(unconstrained_tip_nums, taxa) #filter unconstrained_tip_nums for only entries that also appear in taxa
    ## Generate newick format for filtered constrained tree:
    constrained_newick <- paste("(", (paste(constrained_tips, collapse = ", ")), ")", sep = "")
    unconstrained_newick <- paste(unconstrained_tips, collapse = ", ")
    combined_newick <- paste("(", unconstrained_newick, ",", constrained_newick ,");",sep = "")
    ## Export constrained tree (in newick format)
    name <- gsub(".fas", "", locus)
    filename <- paste(name,"constraint.newick", sep = "_")
    setwd(constraint_path)
    cat(combined_newick, file = filename)
  }
}

2024.07.12

To do:
-x- Update Dataset variable in iqtree scripts above and update scripts on GitHub
-x- Generate filtered constrained gene trees for each locus (a given locus may not contain all taxa)
- create new genetree script for constrained gene trees
- run constrained gene trees

2024.07.13

## Constrained Gene Trees

nano /data/schwartzlab/Biancani/FilterByKnownClades/01_iqtree/02_iqtree_array_constrained_gtree.sh
##########
#!/bin/bash
#SBATCH --job-name="IQarr_gtree"
#SBATCH --time=48:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH -c 1
#SBATCH --mem-per-cpu=6G
#SBATCH --mail-user="biancani@uri.edu" #CHANGE THIS to your user email address
#SBATCH --mail-type=ALL
#SBATCH --array=[1-40]%40

## UPDATE as needed...
# path to Project Directory:
PROJECT=/data/schwartzlab/Biancani/FilterByKnownClades
# path to data directory:
DATA=$PROJECT/data
# Dataset name:
DATASET="Fong"
# path to IQtree scripts:
scripts_dir=$PROJECT/01_iqtree
# path to aligned loci:
aligned_loci_path=$DATA/$DATASET/simulated_loci
# path to constraint tree:
CONSTRAINT=$DATA/$DATASET/emperical_tree/$DATASET\_constraint.newick
# path to output folder (will be created if doesn't exist):
OUTPUT=$PROJECT/output/$DATASET
# name of iqtree array work folder (will be created if doesn't exist):
array_work_folder=$OUTPUT/iqtree_assessment
# path to iqtree executable:
iqtree_exe="/data/schwartzlab/alex/andromeda_tools/iqtree-2.1.2-Linux/bin/iqtree2"

date
cd $array_work_folder
mkdir -p GeneTreesConstrained
cd GeneTreesConstrained

fileline=$(sed -n ${SLURM_ARRAY_TASK_ID}p $array_work_folder/array_list.txt)
cat ${array_work_folder}/${fileline} | while read line
do
	echo $line
	${iqtree_exe} -nt 1 -s ${aligned_loci_path}/${line} -pre inference_${line} -alrt 1000 -m GTR+G -g $CONSTRAINT
	rm -f inference_${line}.ckp.gz inference_${line}.iqtree inference_${line}.log inference_${line}.bionj inference_${line}.mldist inference_${line}.uniqueseq.phy
done
##########
sbatch -q schwartzlab 02_iqtree_array_constrained_gtree.sh
Submitted batch job 329951

########## Liu ##########
for file in $(ls 0*)
do
    sed -i 's/\bFong\b/Liu/g' "$file"
done
##########
sbatch -q schwartzlab 02_iqtree_array_constrained_gtree.sh
Submitted batch job 329991

ERROR: ERROR: Taxon 2 in constraint tree does not appear in full tree
ERROR: ERROR: Taxon 3 in constraint tree does not appear in full tree
ERROR: ERROR: Taxon 5 in constraint tree does not appear in full tree
ERROR: ERROR: Taxon 6 in constraint tree does not appear in full tree
ERROR: ERROR: Taxon 8 in constraint tree does not appear in full tree
ERROR: ERROR: Taxon 9 in constraint tree does not appear in full tree
ERROR: ERROR: Taxon 11 in constraint tree does not appear in full tree
ERROR: ERROR: Taxon 13 in constraint tree does not appear in full tree
