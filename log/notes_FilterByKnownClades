Loci Subsampling - Selecting Loci that support known clades
Analysis notes

GitHub Repo:
https://github.com/LMBiancani/FilterByKnownClades

Written Notes:
https://docs.google.com/document/d/1JuyuBTQ92Tx13pbG4MbDrLy_Qv37Juk4LdzJcGbz2Qw/edit?usp=sharing

Andromeda location:
cd /data/schwartzlab/Biancani/FilterByKnownClades/

Local location:
cd /Users/biancani/Documents/FilterByKnownClades

Alexandra Machine Learning Repo (for simulated loci):
https://github.com/alexandrawalling/PML/tree/main

Local (macbook) directory:
/Users/biancani/Documents/FilterByKnownClades
Andromeda directory:
/data/schwartzlab/Biancani/FilterByKnownClades

2024.05.29

Goal: convert a forked repo to a stand-alone repository without loosing any of the tracked history or contributions.
Create stand-alone repository from Zack's github.

- Fork Zack's Repository: https://github.com/LMBiancani/FilterByKnownClades

Locally:
- Pull all changes in Forked repo to local machine
git clone https://github.com/LMBiancani/FilterByKnownClades

On Github:
- Change the name of the Forked Repository (to anything else ex. "DeleteMe")
- Create a new, empty repo and give it the original name of the Forked Repository

Locally:
- Push all changes to Github (you should not have to do anything special because the new repo now has the same name as
the repo this was originally synced with).
On Github:
- Confirm the new repository contains everything it should
- Delete the forked repository

On Andromeda:
git clone https://github.com/LMBiancani/FilterByKnownClades

add gitignore and include Loci folder

Subset Zack's aligned loci to create test dataset:
/data/schwartzlab/zbergeron/SISRS_mammals/filteredMammalLoci
(101,405 alignments)
ls *11.fasta
(2,780 alignement)

cp /data/schwartzlab/zbergeron/SISRS_mammals/filteredMammalLoci/*11.fasta /data/schwartzlab/Biancani/FilterByKnownClades/Loci/

2024.06.27
Simulations from Alexandra
Simulated loci:
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/fong/1/alignments3/
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/liu/1/alignments3/
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/mcgowen/1/alignments3/
/data/schwartzlab/awalling/Phylo_ML/simulations/empirical/wickett/1/alignments3/

Use copy_data.sh to copy simulated loci to Loci folder (on andromeda only: Data folder listed in gitignore)
deistination folders:
/data/schwartzlab/Biancani/FilterByKnownClades/data/Fong/simulated_loci/
/data/schwartzlab/Biancani/FilterByKnownClades/data/Liu/simulated_loci/
/data/schwartzlab/Biancani/FilterByKnownClades/data/McGowen/simulated_loci/
/data/schwartzlab/Biancani/FilterByKnownClades/data/Wickett/simulated_loci/

tree used for simulations: inferenceEmpirical.iqtree
submission file that generated Empirical trees:
run_iqtree_Fong_empirical.sh
run_iqtree_..._empirical.sh
in...
/data/schwartzlab/awalling/Phylo_ML/datasets/Fong_alignments/
/data/schwartzlab/awalling/Phylo_ML/datasets/Liu_alignments/
/data/schwartzlab/awalling/Phylo_ML/datasets/McGowen_alignments/
/data/schwartzlab/awalling/Phylo_ML/datasets/Wickett_alignments/

Fong:
/data/schwartzlab/awalling/Phylo_ML/datasets/Fong_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/Fong_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/Fong/emperical_tree/

Liu
/data/schwartzlab/awalling/Phylo_ML/datasets/Liu_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/Liu_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/Liu/emperical_tree/

Wickett
/data/schwartzlab/awalling/Phylo_ML/datasets/Wickett_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/Wickett_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/Wickett/emperical_tree/

McGowen
/data/schwartzlab/awalling/Phylo_ML/datasets/McGowen_alignments/inferenceEmpirical.iqtree
cp /data/schwartzlab/awalling/Phylo_ML/datasets/McGowen_alignments/inferenceEmpirical.iqtree /data/schwartzlab/Biancani/FilterByKnownClades/data/McGowen/emperical_tree/

#####

Example submission file for generating emperical trees:
run_iqtree_Fong_empirical.sh
----------
#!/bin/bash
#SBATCH --job-name="IQFong"
#SBATCH --time=96:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=2   # number of nodes
#SBATCH --ntasks-per-node=24   # processor core(s) per node
#SBATCH --mem=250G
#SBATCH --exclusive


cd $SLURM_SUBMIT_DIR

date
#Path to IQTREE executable. Modify with path to your own executable.
iqtree_exe="/home/aknyshov/alex_data/andromeda_tools/iqtree-2.1.2-Linux/bin/iqtree2"


#Concatenate input fasta files and prepare partitions ahead of IQTree run
python3 /home/aknyshov/alex_data/andromeda_tools/AMAS/amas/AMAS.py concat -f fasta -d dna --out-format fasta --part-format raxml -i *fas -c 20 -t concatenatedTrain.fasta -p partitionsTrain.txt

#Run IQtree. Flags: -nt: use 20 CPU cores -spp: specifies partition file but allows partitions to have different evolutionary speeds -pre: specifies prefix for output files -m: determine best fit model immediately followed by tree reconstruction -bb: sets 1000 bootstrap replicates  -alrt: sets 1000 replicates to perform SH-like approximate likelihood test (SH-aLRT)
${iqtree_exe} -nt 20 -s concatenatedTrain.fasta -spp partitionsTrain.txt -pre inferenceEmpirical -m MFP -bb 1000 -alrt 1000


date
---------

2024.07.03

To Do:

- For each simulated locus:
  - infer an unconstrained gene tree, calculate maximum likelihood (completed?)
  - infer a constrained gene tree (constrain "known" clade), calculate maximum likelihood
  - compare likelihoods
    - if constrained is > or = unconstrained, keep LOCUS (else filter locsus)
- Build species tree from filtered simulated Loci
- Build species tree from unfiltered simulated LOCI
- Compare species tree to empirical tree (which is more similar)?

2024.07.10

nano /data/schwartzlab/Biancani/FilterByKnownClades/01_iqtree/00_iqtree_prep.sh
##########
#!/bin/bash
#SBATCH --job-name="IQprep"
#SBATCH --time=0:30:00  # walltime limit (HH:MM:SS)
#SBATCH --mail-user="biancani@uri.edu" #CHANGE THIS to your user email address
#SBATCH --mail-type=ALL
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH -c 1
#SBATCH --mem-per-cpu=6G

## UPDATE as needed...
# path to Project Directory:
PROJECT=/data/schwartzlab/Biancani/FilterByKnownClades
# path to data directory:
DATA=$PROJECT/data
# Dataset name:
DATASET="Fong"
# path to IQtree scripts:
scripts_dir=$PROJECT/01_iqtree
# path to aligned loci:
aligned_loci_path=$DATA/$DATASET/simulated_loci
# path to output folder (will be created if doesn't exist):
OUTPUT=$PROJECT/output/$DATASET
# name of iqtree array work folder (will be created if doesn't exist):
array_work_folder=iqtree_assessment
# number of loci per array task
LociPerTask=50

mkdir -p $OUTPUT
cd $OUTPUT
mkdir -p ${array_work_folder}
cd ${array_work_folder}
ls ${aligned_loci_path} | rev | cut -f1 -d/ | rev | split -l $LociPerTask - aligned_loci_list_
arrayN=$(ls aligned_loci_list_* | wc -l)
ls aligned_loci_list_* > array_list.txt
ARRAY="#SBATCH --array=[1-${arrayN}]%40"
echo $ARRAY
echo $ARRAY >> sbatch_array_directive.txt
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329346
Job ID: 329346
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:04 core-walltime
Job Wall-clock time: 00:00:04
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)

output: #SBATCH --array=[1-40]%40
(to be included in subsequent array jobs)

nano /data/schwartzlab/Biancani/FilterByKnownClades/01_iqtree/01_iqtree_array_gtree.sh
##########
#!/bin/bash
#SBATCH --job-name="IQarr_gtree"
#SBATCH --time=48:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH -c 1
#SBATCH --mem-per-cpu=6G
#SBATCH --mail-user="biancani@uri.edu" #CHANGE THIS to your user email address
#SBATCH --mail-type=ALL
#SBATCH --array=[1-40]%40

## UPDATE as needed...
# path to Project Directory:
PROJECT=/data/schwartzlab/Biancani/FilterByKnownClades
# path to data directory:
DATA=$PROJECT/data
# path to IQtree scripts:
scripts_dir=$PROJECT/01_iqtree
# path to aligned loci:
aligned_loci_path=$DATA/Fong/simulated_loci
# path to output folder (will be created if doesn't exist):
OUTPUT=$PROJECT/output/Fong
# name of iqtree array work folder (will be created if doesn't exist):
array_work_folder=$OUTPUT/iqtree_assessment
# path to iqtree executable:
iqtree_exe="/data/schwartzlab/alex/andromeda_tools/iqtree-2.1.2-Linux/bin/iqtree2"

date
cd $array_work_folder
mkdir -p GeneTreesUnconstrained
cd GeneTreesUnconstrained

fileline=$(sed -n ${SLURM_ARRAY_TASK_ID}p $array_work_folder/array_list.txt)
cat ${array_work_folder}/${fileline} | while read line
do
	echo $line
	${iqtree_exe} -nt 1 -s ${aligned_loci_path}/${line} -pre inference_${line} -alrt 1000 -m GTR+G
	rm -f inference_${line}.ckp.gz inference_${line}.iqtree inference_${line}.log inference_${line}.bionj inference_${line}.mldist inference_${line}.uniqueseq.phy
done
##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329481
Job ID: 329481
Array Job ID: 329481_40
Cluster: andromeda
User/Group: biancani/schwartzlab
State: FAILED (exit code 1)
Cores: 1
CPU Utilized: 01:22:53
CPU Efficiency: 98.75% of 01:23:56 core-walltime
Job Wall-clock time: 01:23:56
Memory Utilized: 35.70 MB
Memory Efficiency: 0.58% of 6.00 GB
**** fail due to an error removing output files that did not exist. you can use the -f (force) flag with the rm command to remove a file only if it exists, without throwing an error if it does not. The -f flag tells rm to ignore nonexistent files and arguments, and never prompt for confirmation..
Otherwise output looks fine.


For other loci groups, edit the .sh files and replace "Fong" with the name of one of the other datasets
########## Wickett ##########
for file in $(ls 0*)
do
    sed -i 's/\bFong\b/Wickett/g' "$file"
done
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329523
Job ID: 329523
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:08 core-walltime
Job Wall-clock time: 00:00:08
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)

##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329524
Job ID: 329524
Array Job ID: 329524_40
Cluster: andromeda
User/Group: biancani/schwartzlab
State: FAILED (exit code 1)
Cores: 1
CPU Utilized: 01:12:49
CPU Efficiency: 98.78% of 01:13:43 core-walltime
Job Wall-clock time: 01:13:43
Memory Utilized: 45.28 MB
Memory Efficiency: 0.74% of 6.00 GB
**** fail due to an error removing output files that did not exist. you can use the -f (force) flag with the rm command to remove a file only if it exists, without throwing an error if it does not. The -f flag tells rm to ignore nonexistent files and arguments, and never prompt for confirmation..
Otherwise output looks fine.

########## Liu ##########
for file in $(ls 0*)
do
    sed -i 's/\bWickett\b/Liu/g' "$file"
done
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329599
Job ID: 329599
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:09 core-walltime
Job Wall-clock time: 00:00:09
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)
##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329600



########## McGowen ##########
for file in $(ls 0*)
do
    sed -i 's/\bLiu\b/McGowen/g' "$file"
done
##########
sbatch -q schwartzlab 00_iqtree_prep.sh
Submitted batch job 329640
Job ID: 329640
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:00:07 core-walltime
Job Wall-clock time: 00:00:07
Memory Utilized: 0.00 MB (estimated maximum)
Memory Efficiency: 0.00% of 6.00 GB (6.00 GB/core)
##########
sbatch -q schwartzlab 01_iqtree_array_gtree.sh
Submitted batch job 329641
Job ID: 329641
Array Job ID: 329641_40
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:35:52
CPU Efficiency: 97.86% of 00:36:39 core-walltime
Job Wall-clock time: 00:36:39
Memory Utilized: 17.40 MB
Memory Efficiency: 0.28% of 6.00 GB

Constrained gene trees:
What node to choose for Fong tree? - Turtles.

2024.07.11

The following R script adapts the R script used to prep the emperical trees for simulations in order to output the rerooted emperical tree and a mapping of tip numbers to tip name labels.
Original R script:
https://github.com/alexandrawalling/PML/blob/main/1_empirical_tree_generation/empirical_tree_processor.R

########
module load R-bundle-Bioconductor/3.16-foss-2022b-R-4.2.2
R
#Load in libraries
library(ape)
library(ggplot2)
library(geiger)
library(ggtree)

#Empirical species tree 1 (Fong et al.):
setwd("/data/schwartzlab/awalling/Phylo_ML")
fong_tree <- read.tree("simulations/empirical/fong/1/inferenceEmpirical.treefile")
fong_tree <- root(fong_tree, outgroup = "Danio")
#Tip labels:
fong_tips <- fong_tree$tip.label
#Export rerooted emperical tree
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/Fong/emperical_tree")
write.tree(fong_tree, file = "Fong_emperical.tree")
#Replace tip labels with numbers:
fong_tree$tip.label <- as.character(1:length(fong_tree$tip.label))
#Tip numbers:
fong_tip_nums <- fong_tree$tip.label
#Export tip names & numbers:
fong_tips_df <- data.frame(fong_tip_nums,fong_tips)
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/Fong/emperical_tree")
write.table(fong_tips_df, file = "fong_tips.csv", sep = ",", row.names = FALSE, col.names = FALSE)

#Empirical species tree 2 (Wickett et al.):
setwd("/data/schwartzlab/awalling/Phylo_ML")
wickett_tree <- read.tree("simulations/empirical/wickett/1/inferenceEmpirical.treefile")
wickett_tree <- root(wickett_tree, outgroup = "Pyramimonas_parkeae")
#Tip labels:
wickett_tips <- wickett_tree$tip.label
#Export rerooted emperical tree
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/Wickett/emperical_tree")
write.tree(wickett_tree, file = "Wickett_emperical.tree")
#Replace tip labels with numbers:
wickett_tree$tip.label <- as.character(1:length(wickett_tree$tip.label))
#Tip numbers:
wickett_tip_nums <- wickett_tree$tip.label
#tip names & numbers:
wickett_tips_df <- data.frame(wickett_tip_nums,wickett_tips)
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/Wickett/emperical_tree")
write.table(wickett_tips_df, file = "wickett_tips.csv", sep = ",", row.names = FALSE, col.names = FALSE)

#Empirical species tree 3 (Liu et al.):
setwd("/data/schwartzlab/awalling/Phylo_ML")
liu_tree <- read.tree("simulations/empirical/liu/1/inferenceEmpirical.treefile")
liu_tree <- root(liu_tree, outgroup = "danio_rer")
#Tip labels:
liu_tips <- liu_tree$tip.label
#Export rerooted emperical tree
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/Liu/emperical_tree")
write.tree(liu_tree, file = "Liu_emperical.tree")
#Replace tip labels with numbers:
liu_tree$tip.label <- as.character(1:length(liu_tree$tip.label))
#Tip numbers:
liu_tip_nums <- liu_tree$tip.label
#tip names & numbers:
liu_tips_df <- data.frame(liu_tip_nums,liu_tips)
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/Liu/emperical_tree")
write.table(liu_tips_df, file = "liu_tips.csv", sep = ",", row.names = FALSE, col.names = FALSE)

#Empirical species tree 4 (McGowen et al.):
setwd("/data/schwartzlab/awalling/Phylo_ML")
mcgowen_tree <- read.tree("simulations/empirical/mcgowen/1/inferenceEmpirical.treefile")
# mcgowen_tree <- root(mcgowen_tree, outgroup = "") #this tree was not re-rooted for simulations
#Tip labels:
mcgowen_tips <- mcgowen_tree$tip.label
#Export rerooted emperical tree
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/McGowen/emperical_tree")
write.tree(mcgowen_tree, file = "McGowen_emperical.tree")
#Replace tip labels with numbers:
mcgowen_tree$tip.label <- as.character(1:length(mcgowen_tree$tip.label))
#Tip numbers:
mcgowen_tip_nums <- mcgowen_tree$tip.label
#tip names & numbers:
mcgowen_tips_df <- data.frame(mcgowen_tip_nums,mcgowen_tips)
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/McGowen/emperical_tree")
write.table(mcgowen_tips_df, file = "mcgowen_tips.csv", sep = ",", row.names = FALSE, col.names = FALSE)


Constraint Trees
The following R script adapts the R script used to prep the emperical trees for simulations in order to output constraint trees.
Original R script: https://github.com/alexandrawalling/PML/blob/main/1_empirical_tree_generation/empirical_tree_processor.R
########
module load R-bundle-Bioconductor/3.16-foss-2022b-R-4.2.2
R
## Load in libraries
library(ape)
library(ggplot2)
library(geiger)
library(ggtree)

## Empirical species tree 1 (Fong et al.):
setwd("/data/schwartzlab/Biancani/FilterByKnownClades/data/Fong/emperical_tree")
fong_tree <- read.tree("Fong_emperical.tree")
## Label nodes with numbers:
## Number of internal nodes
num_internal_nodes <- fong_tree$Nnode
### num_internal_nodes = 127
## Number of tips
num_tips <- Ntip(fong_tree)
### num_tips = 129
# Generate sequential node numbers (node numbers start with the number of tips +1)
sequential_numbers <- seq((1+num_tips), (1+num_tips+num_internal_nodes))
# Assign sequential numbers to node labels
fong_tree$node.label <- as.character(sequential_numbers)
### fong_tree$node.label are now numbered 130-257
# Export numbered tree
write.tree(fong_tree, file = "Fong_numbered_nodes.tree")
### inspect tree: Node 140 is Turtles (need to collapse all but this node)
# Extract the clade starting from node 140
turtles <- extract.clade(fong_tree, 140)
### 46 Turtles
# list of Turtles
turtle_taxa <- turtles$tip.label
# list of non-Turtles
non_turtle_taxa <- setdiff(fong_tree$tip.label, turtle_taxa)
# convert taxon names to tip numbers



error! internal nodes are numbered starting from the number of tips plus one. For example, if a tree has 10 tips, the internal nodes would start from 11.



2024.07.12 - backup of R script:

2024.07.11


Original R script (used to prep the emperical trees for simulations):
  https://github.com/alexandrawalling/PML/blob/main/1_empirical_tree_generation/empirical_tree_processor.R

What this script does:
  - copy emperical trees from Alexandra (after re-rooting)
  -

  in order to output the rerooted emperical tree and a mapping of tip numbers to tip name labels.


########
module load R-bundle-Bioconductor/3.16-foss-2022b-R-4.2.2
R
#Load in libraries
library(ape)
library(ggplot2)
library(geiger)
library(ggtree)

datasets <- c("Fong","Liu","Wickett","McGowen")

# copy emperical trees from Alexandra:
for (dataset in datasets){
  setwd("/data/schwartzlab/awalling/Phylo_ML")
  tree_path <- paste("simulations/empirical", tolower(dataset), "1/inferenceEmpirical.treefile", sep="/")
  emperical_tree <- read.tree(tree_path)
  #re-root trees (as done by Alexandra):
  if (dataset == "Fong"){
    emperical_tree <- root(emperical_tree, outgroup = "Danio")
  } else if (dataset == "Liu"){
    emperical_tree <- root(emperical_tree, outgroup = "danio_rer")
  } else if (dataset == "Wickett"){
    emperical_tree <- root(emperical_tree, outgroup = "Pyramimonas_parkeae")
  } else if (dataset == "McGowen"){
    # McGowen tree was not re-rooted for simulations
  }
  #Save rerooted emperical tree
  out_path <- paste("/data/schwartzlab/Biancani/FilterByKnownClades/data", dataset, "emperical_tree", sep = "/")
  setwd(out_path)
  filename <- paste(dataset, "emperical.tree", sep = "_")
  #write.tree(emperical_tree, filename)
}

# Tip processing of emperical trees
for (dataset in datasets){
  #read previously saved emperical tree:
  directory_path <- paste("/data/schwartzlab/Biancani/FilterByKnownClades/data", dataset, "emperical_tree", sep = "/")
  setwd(directory_path)
  emperical_filename <- paste(dataset, "emperical.tree", sep = "_")
  emperical_tree <- read.tree(emperical_filename)
  #store current tip labels
  tips <- emperical_tree$tip.label
  tip_names_tree <- emperical_tree
  #Replace tip labels with numbers:
  emperical_tree$tip.label <- as.character(1:length(emperical_tree$tip.label))
  #store numbered tip labels
  tip_nums <- emperical_tree$tip.label
  tip_num_tree <- emperical_tree
  #Export tip names & numbers:
  tips_df <- data.frame(tip_nums, tips)
  filename <- paste(dataset,"tips.csv",sep = "_")
  #write.table(tips_df, file = filename, sep = ",", row.names = FALSE, col.names = FALSE)
  #Export tree with numbered tips:
  filename <- paste(dataset, "num_tips_emperical.tree", sep = "_")
  #write.tree(tip_num_tree, filename)
  #create combined tip tree
  # Use apply to concatenate strings across rows (margin=1),
  combined_tips <- apply(tips_df, 1, function(row) paste(row, collapse = "_"))
  #Replace tip labels with numbers & names:
  emperical_tree$tip.label <- combined_tips
  combo_tip_tree <- emperical_tree
  #Export tree with combined tips:
  filename <- paste(dataset, "combo_tips_emperical.tree", sep = "_")
  #write.tree(combo_tip_tree, filename)
  #Generate collapsed trees for constrained gene trees, ex. (A,B,C,D,(E,F,G,H));
  # Label nodes with numbers:
  # Number of internal nodes:
  num_internal_nodes <- combo_tip_tree$Nnode
  # Number of tips:
  num_tips <- Ntip(combo_tip_tree)
  # Generate node numbers (node numbers start with the number of tips +1)
  node_numbers <- seq((1+num_tips), (1+num_tips+num_internal_nodes))
  # Assign sequential numbers to node labels
  node_num_tree <- combo_tip_tree
  node_num_tree$node.label <- as.character(node_numbers)
  # Export node numbered tree:
  filename <- paste(dataset, "num_nodes_emperical.tree", sep = "_")
  #write.tree(node_num_tree, filename)
  #Trees with numbered nodes were inspected to find the node corresponding to clade to be constrained
  #Fong=turtles(node#140) #Liu=primates(node#135)#Wickett=Angiosperms-flowering plants(node#116) #McGowen=cetaceans-ingroup(node#177)
  if (dataset=="Fong"){
    node <- 140
    print(dataset)
    print(as.character(node))
  } else if (dataset=="Liu"){
    node <- 135
    print(dataset)
    print(as.character(node))
  } else if (dataset=="Wickett"){
    node <- 116
    print(dataset)
    print(as.character(node))
  } else if (dataset=="McGowen"){
    node <- 177
    print(dataset)
    print(as.character(node))
  }
}

# IQ-TREE: -g Specify a topological constraint tree file in NEWICK format. The constraint tree can be a multifurcating tree and need not to include all taxa.
#Generate collapsed trees for constrained gene trees
# ex. (A,B,C,D,(E,F,G,H));

dataset <- "Fong"
# add to above for loop after testing!


  ### inspect tree: Node 140 is Turtles (need to collapse all but this node)
  # Extract the clade starting from node 140
  turtles <- extract.clade(fong_tree, 140)
  ### 46 Turtles
  # list of Turtles
  turtle_taxa <- turtles$tip.label
  # list of non-Turtles
  non_turtle_taxa <- setdiff(fong_tree$tip.label, turtle_taxa)
  # convert taxon names to tip numbers



  error! internal nodes are numbered starting from the number of tips plus one. For example, if a tree has 10 tips, the internal nodes would start from 11.

  # Get the tip labels that are descendants of node 11
  
